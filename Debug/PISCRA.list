
PISCRA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004014  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080042ac  080042ac  000052ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042bc  080042bc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  080042c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  24000014  080042d8  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000c0  080042d8  000060c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa7a  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000192a  00000000  00000000  00010abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008d0  00000000  00000000  000123e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000695  00000000  00000000  00012cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035b15  00000000  00000000  0001334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b70e  00000000  00000000  00048e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00155de9  00000000  00000000  00054570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001aa359  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002334  00000000  00000000  001aa39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000007c  00000000  00000000  001ac6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004294 	.word	0x08004294

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08004294 	.word	0x08004294

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 f969 	bl	80005b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fb2f 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f837 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f907 	bl	80004fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80002ee:	f000 f8af 	bl	8000450 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	4813      	ldr	r0, [pc, #76]	@ (8000344 <main+0x6c>)
 80002f8:	f000 fef2 	bl	80010e0 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // 1. Ativar o escravo (Chip Select em nível baixo)
	      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2110      	movs	r1, #16
 8000300:	4810      	ldr	r0, [pc, #64]	@ (8000344 <main+0x6c>)
 8000302:	f000 feed 	bl	80010e0 <HAL_GPIO_WritePin>

	      // 2. Enviar o comando '0x01' e receber o status do escravo ao mesmo tempo
	      HAL_SPI_TransmitReceive(&hspi1, &comando_mestre, &status_escravo, 1, 1000);
 8000306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2301      	movs	r3, #1
 800030e:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <main+0x70>)
 8000310:	490e      	ldr	r1, [pc, #56]	@ (800034c <main+0x74>)
 8000312:	480f      	ldr	r0, [pc, #60]	@ (8000350 <main+0x78>)
 8000314:	f003 fb6e 	bl	80039f4 <HAL_SPI_TransmitReceive>

	      // 3. Desativar o escravo (Chip Select em nível alto)
	      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2110      	movs	r1, #16
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <main+0x6c>)
 800031e:	f000 fedf 	bl	80010e0 <HAL_GPIO_WritePin>

	      // 4. Verificar o status recebido do escravo
	      if (status_escravo == 0xAA)
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <main+0x70>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2baa      	cmp	r3, #170	@ 0xaa
 8000328:	d108      	bne.n	800033c <main+0x64>
	      {
	        // Se recebeu o comando do escravo, pisca o LED vermelho local
	        HAL_GPIO_TogglePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin);
 800032a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800032e:	4809      	ldr	r0, [pc, #36]	@ (8000354 <main+0x7c>)
 8000330:	f000 feef 	bl	8001112 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000334:	2101      	movs	r1, #1
 8000336:	4807      	ldr	r0, [pc, #28]	@ (8000354 <main+0x7c>)
 8000338:	f000 feeb 	bl	8001112 <HAL_GPIO_TogglePin>
	      }

	      // 5. Esperar antes da próxima comunicação
	      HAL_Delay(100); // Pisca a cada meio segundo
 800033c:	2064      	movs	r0, #100	@ 0x64
 800033e:	f000 fb93 	bl	8000a68 <HAL_Delay>
	      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000342:	e7db      	b.n	80002fc <main+0x24>
 8000344:	58020000 	.word	0x58020000
 8000348:	24000030 	.word	0x24000030
 800034c:	24000000 	.word	0x24000000
 8000350:	24000034 	.word	0x24000034
 8000354:	58020400 	.word	0x58020400

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b09c      	sub	sp, #112	@ 0x70
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000362:	224c      	movs	r2, #76	@ 0x4c
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 ff67 	bl	800423a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2220      	movs	r2, #32
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f003 ff61 	bl	800423a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000378:	2002      	movs	r0, #2
 800037a:	f000 fee5 	bl	8001148 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800037e:	2300      	movs	r3, #0
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	4b31      	ldr	r3, [pc, #196]	@ (8000448 <SystemClock_Config+0xf0>)
 8000384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000386:	4a30      	ldr	r2, [pc, #192]	@ (8000448 <SystemClock_Config+0xf0>)
 8000388:	f023 0301 	bic.w	r3, r3, #1
 800038c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800038e:	4b2e      	ldr	r3, [pc, #184]	@ (8000448 <SystemClock_Config+0xf0>)
 8000390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <SystemClock_Config+0xf4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003a0:	4a2a      	ldr	r2, [pc, #168]	@ (800044c <SystemClock_Config+0xf4>)
 80003a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b28      	ldr	r3, [pc, #160]	@ (800044c <SystemClock_Config+0xf4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b4:	bf00      	nop
 80003b6:	4b25      	ldr	r3, [pc, #148]	@ (800044c <SystemClock_Config+0xf4>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003c2:	d1f8      	bne.n	80003b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	2302      	movs	r3, #2
 80003c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003cc:	2340      	movs	r3, #64	@ 0x40
 80003ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d4:	2300      	movs	r3, #0
 80003d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003d8:	2304      	movs	r3, #4
 80003da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003dc:	230a      	movs	r3, #10
 80003de:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003ec:	230c      	movs	r3, #12
 80003ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80003f0:	2302      	movs	r3, #2
 80003f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fedd 	bl	80011bc <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000408:	f000 f900 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	233f      	movs	r3, #63	@ 0x3f
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fb1d 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800043c:	f000 f8e6 	bl	800060c <Error_Handler>
  }
}
 8000440:	bf00      	nop
 8000442:	3770      	adds	r7, #112	@ 0x70
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	58000400 	.word	0x58000400
 800044c:	58024800 	.word	0x58024800

08000450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000454:	4b27      	ldr	r3, [pc, #156]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000456:	4a28      	ldr	r2, [pc, #160]	@ (80004f8 <MX_SPI1_Init+0xa8>)
 8000458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045a:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 800045c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000462:	4b24      	ldr	r3, [pc, #144]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000468:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 800046a:	2207      	movs	r2, #7
 800046c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800046e:	4b21      	ldr	r3, [pc, #132]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047a:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 800047c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000482:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000484:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048a:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000496:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800049c:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_SPI1_Init+0xa4>)
 80004e2:	f003 f963 	bl	80037ac <HAL_SPI_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80004ec:	f000 f88e 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	24000034 	.word	0x24000034
 80004f8:	40013000 	.word	0x40013000

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <MX_GPIO_Init+0xac>)
 8000514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000518:	4a23      	ldr	r2, [pc, #140]	@ (80005a8 <MX_GPIO_Init+0xac>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000522:	4b21      	ldr	r3, [pc, #132]	@ (80005a8 <MX_GPIO_Init+0xac>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <MX_GPIO_Init+0xac>)
 8000532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000536:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <MX_GPIO_Init+0xac>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <MX_GPIO_Init+0xac>)
 8000542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2110      	movs	r1, #16
 8000552:	4816      	ldr	r0, [pc, #88]	@ (80005ac <MX_GPIO_Init+0xb0>)
 8000554:	f000 fdc4 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_VERMELHO_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800055e:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <MX_GPIO_Init+0xb4>)
 8000560:	f000 fdbe 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000564:	2310      	movs	r3, #16
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	480c      	ldr	r0, [pc, #48]	@ (80005ac <MX_GPIO_Init+0xb0>)
 800057c:	f000 fc00 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_VERMELHO_Pin;
 8000580:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_GPIO_Init+0xb4>)
 800059a:	f000 fbf1 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58024400 	.word	0x58024400
 80005ac:	58020000 	.word	0x58020000
 80005b0:	58020400 	.word	0x58020400

080005b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005c6:	f000 fb63 	bl	8000c90 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005d6:	231f      	movs	r3, #31
 80005d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005da:	2387      	movs	r3, #135	@ 0x87
 80005dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005de:	2300      	movs	r3, #0
 80005e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005e2:	2300      	movs	r3, #0
 80005e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005e6:	2301      	movs	r3, #1
 80005e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005f6:	463b      	mov	r3, r7
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fb81 	bl	8000d00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005fe:	2004      	movs	r0, #4
 8000600:	f000 fb5e 	bl	8000cc0 <HAL_MPU_Enable>

}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <Error_Handler+0x8>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <HAL_MspInit+0x30>)
 8000620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000624:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_MspInit+0x30>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_MspInit+0x30>)
 8000630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0ba      	sub	sp, #232	@ 0xe8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	22c0      	movs	r2, #192	@ 0xc0
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fde4 	bl	800423a <memset>
  if(hspi->Instance==SPI1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <HAL_SPI_MspInit+0xc4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d144      	bne.n	8000706 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800067c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fd1d 	bl	80020d0 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800069c:	f7ff ffb6 	bl	800060c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c4:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <HAL_SPI_MspInit+0xc8>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006dc:	23e0      	movs	r3, #224	@ 0xe0
 80006de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f4:	2305      	movs	r3, #5
 80006f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <HAL_SPI_MspInit+0xcc>)
 8000702:	f000 fb3d 	bl	8000d80 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000706:	bf00      	nop
 8000708:	37e8      	adds	r7, #232	@ 0xe8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40013000 	.word	0x40013000
 8000714:	58024400 	.word	0x58024400
 8000718:	58020000 	.word	0x58020000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f959 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <SystemInit+0x114>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a42      	ldr	r2, [pc, #264]	@ (8000890 <SystemInit+0x114>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000790:	4b40      	ldr	r3, [pc, #256]	@ (8000894 <SystemInit+0x118>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f003 030f 	and.w	r3, r3, #15
 8000798:	2b06      	cmp	r3, #6
 800079a:	d807      	bhi.n	80007ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <SystemInit+0x118>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f023 030f 	bic.w	r3, r3, #15
 80007a4:	4a3b      	ldr	r2, [pc, #236]	@ (8000894 <SystemInit+0x118>)
 80007a6:	f043 0307 	orr.w	r3, r3, #7
 80007aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <SystemInit+0x11c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a39      	ldr	r2, [pc, #228]	@ (8000898 <SystemInit+0x11c>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <SystemInit+0x11c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <SystemInit+0x11c>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4935      	ldr	r1, [pc, #212]	@ (8000898 <SystemInit+0x11c>)
 80007c4:	4b35      	ldr	r3, [pc, #212]	@ (800089c <SystemInit+0x120>)
 80007c6:	4013      	ands	r3, r2
 80007c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <SystemInit+0x118>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d007      	beq.n	80007e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <SystemInit+0x118>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f023 030f 	bic.w	r3, r3, #15
 80007de:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <SystemInit+0x118>)
 80007e0:	f043 0307 	orr.w	r3, r3, #7
 80007e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <SystemInit+0x11c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <SystemInit+0x11c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <SystemInit+0x11c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007f8:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <SystemInit+0x11c>)
 80007fa:	4a29      	ldr	r2, [pc, #164]	@ (80008a0 <SystemInit+0x124>)
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemInit+0x11c>)
 8000800:	4a28      	ldr	r2, [pc, #160]	@ (80008a4 <SystemInit+0x128>)
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <SystemInit+0x11c>)
 8000806:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <SystemInit+0x12c>)
 8000808:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <SystemInit+0x11c>)
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <SystemInit+0x11c>)
 8000812:	4a25      	ldr	r2, [pc, #148]	@ (80008a8 <SystemInit+0x12c>)
 8000814:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <SystemInit+0x11c>)
 8000818:	2200      	movs	r2, #0
 800081a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800081c:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <SystemInit+0x11c>)
 800081e:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <SystemInit+0x12c>)
 8000820:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <SystemInit+0x11c>)
 8000824:	2200      	movs	r2, #0
 8000826:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <SystemInit+0x11c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a1a      	ldr	r2, [pc, #104]	@ (8000898 <SystemInit+0x11c>)
 800082e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000832:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <SystemInit+0x11c>)
 8000836:	2200      	movs	r2, #0
 8000838:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <SystemInit+0x130>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <SystemInit+0x134>)
 8000840:	4013      	ands	r3, r2
 8000842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000846:	d202      	bcs.n	800084e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <SystemInit+0x138>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <SystemInit+0x11c>)
 8000850:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000858:	2b00      	cmp	r3, #0
 800085a:	d113      	bne.n	8000884 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <SystemInit+0x11c>)
 800085e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000862:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <SystemInit+0x11c>)
 8000864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000868:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <SystemInit+0x13c>)
 800086e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000872:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <SystemInit+0x11c>)
 8000876:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800087a:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <SystemInit+0x11c>)
 800087c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000880:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	52002000 	.word	0x52002000
 8000898:	58024400 	.word	0x58024400
 800089c:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a0:	02020200 	.word	0x02020200
 80008a4:	01ff0000 	.word	0x01ff0000
 80008a8:	01010280 	.word	0x01010280
 80008ac:	5c001000 	.word	0x5c001000
 80008b0:	ffff0000 	.word	0xffff0000
 80008b4:	51008108 	.word	0x51008108
 80008b8:	52004000 	.word	0x52004000

080008bc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <ExitRun0Mode+0x2c>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <ExitRun0Mode+0x2c>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008cc:	bf00      	nop
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <ExitRun0Mode+0x2c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f9      	beq.n	80008ce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	58024800 	.word	0x58024800

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008ec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000928 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80008f0:	f7ff ffe4 	bl	80008bc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f4:	f7ff ff42 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f003 fc95 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fcd9 	bl	80002d8 <main>
  bx  lr
 8000926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000928:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800092c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000930:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000934:	080042c4 	.word	0x080042c4
  ldr r2, =_sbss
 8000938:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800093c:	240000c0 	.word	0x240000c0

08000940 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC3_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f96e 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000950:	f001 fa44 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8000954:	4602      	mov	r2, r0
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_Init+0x68>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	f003 030f 	and.w	r3, r3, #15
 8000960:	4913      	ldr	r1, [pc, #76]	@ (80009b0 <HAL_Init+0x6c>)
 8000962:	5ccb      	ldrb	r3, [r1, r3]
 8000964:	f003 031f 	and.w	r3, r3, #31
 8000968:	fa22 f303 	lsr.w	r3, r2, r3
 800096c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_Init+0x68>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <HAL_Init+0x6c>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	f003 031f 	and.w	r3, r3, #31
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	fa22 f303 	lsr.w	r3, r2, r3
 8000984:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <HAL_Init+0x70>)
 8000986:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <HAL_Init+0x74>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f814 	bl	80009bc <HAL_InitTick>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e002      	b.n	80009a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800099e:	f7ff fe3b 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58024400 	.word	0x58024400
 80009b0:	080042ac 	.word	0x080042ac
 80009b4:	24000008 	.word	0x24000008
 80009b8:	24000004 	.word	0x24000004

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_InitTick+0x60>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e021      	b.n	8000a14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_InitTick+0x64>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_InitTick+0x60>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f945 	bl	8000c76 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f91d 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <HAL_InitTick+0x68>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000010 	.word	0x24000010
 8000a20:	24000004 	.word	0x24000004
 8000a24:	2400000c 	.word	0x2400000c

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	24000010 	.word	0x24000010
 8000a4c:	240000bc 	.word	0x240000bc

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	240000bc 	.word	0x240000bc

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000010 	.word	0x24000010

08000ab0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetREVID+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	0c1b      	lsrs	r3, r3, #16
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	5c001000 	.word	0x5c001000

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x40>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	05fa0000 	.word	0x05fa0000

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff47 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb2 	bl	8000be8 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c94:	f3bf 8f5f 	dmb	sy
}
 8000c98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_MPU_Disable+0x28>)
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_MPU_Disable+0x28>)
 8000ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ca4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_MPU_Disable+0x2c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	e000ed90 	.word	0xe000ed90

08000cc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf8 <HAL_MPU_Enable+0x38>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_MPU_Enable+0x3c>)
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <HAL_MPU_Enable+0x3c>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cdc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cde:	f3bf 8f4f 	dsb	sy
}
 8000ce2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ce4:	f3bf 8f6f 	isb	sy
}
 8000ce8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed90 	.word	0xe000ed90
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	785a      	ldrb	r2, [r3, #1]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <HAL_MPU_ConfigRegion+0x7c>)
 8000d0e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_MPU_ConfigRegion+0x7c>)
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_MPU_ConfigRegion+0x7c>)
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_MPU_ConfigRegion+0x7c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7b1b      	ldrb	r3, [r3, #12]
 8000d28:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7adb      	ldrb	r3, [r3, #11]
 8000d2e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7a9b      	ldrb	r3, [r3, #10]
 8000d36:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7b5b      	ldrb	r3, [r3, #13]
 8000d3e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7b9b      	ldrb	r3, [r3, #14]
 8000d46:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7bdb      	ldrb	r3, [r3, #15]
 8000d4e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7a5b      	ldrb	r3, [r3, #9]
 8000d56:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d60:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d6a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d6c:	6113      	str	r3, [r2, #16]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed90 	.word	0xe000ed90

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d8e:	4b89      	ldr	r3, [pc, #548]	@ (8000fb4 <HAL_GPIO_Init+0x234>)
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d92:	e194      	b.n	80010be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8186 	beq.w	80010b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x44>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d017      	beq.n	8000e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d123      	bne.n	8000eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0203 	and.w	r2, r3, #3
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80e0 	beq.w	80010b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb8 <HAL_GPIO_Init+0x238>)
 8000efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efe:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb8 <HAL_GPIO_Init+0x238>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f08:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <HAL_GPIO_Init+0x238>)
 8000f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a29      	ldr	r2, [pc, #164]	@ (8000fbc <HAL_GPIO_Init+0x23c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	@ (8000fc0 <HAL_GPIO_Init+0x240>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d052      	beq.n	8000fe8 <HAL_GPIO_Init+0x268>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <HAL_GPIO_Init+0x244>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d031      	beq.n	8000fae <HAL_GPIO_Init+0x22e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc8 <HAL_GPIO_Init+0x248>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x22a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_GPIO_Init+0x24c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd0 <HAL_GPIO_Init+0x250>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <HAL_GPIO_Init+0x254>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <HAL_GPIO_Init+0x258>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a19      	ldr	r2, [pc, #100]	@ (8000fdc <HAL_GPIO_Init+0x25c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_GPIO_Init+0x260>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <HAL_GPIO_Init+0x264>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	e02d      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f8e:	230a      	movs	r3, #10
 8000f90:	e02b      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e029      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e027      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e025      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e023      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e021      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e01f      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e01d      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e01b      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fb2:	bf00      	nop
 8000fb4:	58000080 	.word	0x58000080
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58000400 	.word	0x58000400
 8000fc0:	58020000 	.word	0x58020000
 8000fc4:	58020400 	.word	0x58020400
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58020c00 	.word	0x58020c00
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	58021400 	.word	0x58021400
 8000fd8:	58021800 	.word	0x58021800
 8000fdc:	58021c00 	.word	0x58021c00
 8000fe0:	58022000 	.word	0x58022000
 8000fe4:	58022400 	.word	0x58022400
 8000fe8:	2300      	movs	r3, #0
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffa:	4938      	ldr	r1, [pc, #224]	@ (80010dc <HAL_GPIO_Init+0x35c>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800102e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800105c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f ae63 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3724      	adds	r7, #36	@ 0x24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	58000400 	.word	0x58000400

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001124:	887a      	ldrh	r2, [r7, #2]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	041a      	lsls	r2, r3, #16
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43d9      	mvns	r1, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	400b      	ands	r3, r1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b04      	cmp	r3, #4
 800115a:	d00a      	beq.n	8001172 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_PWREx_ConfigSupply+0x70>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d001      	beq.n	800116e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e01f      	b.n	80011ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e01d      	b.n	80011ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f023 0207 	bic.w	r2, r3, #7
 800117a:	490f      	ldr	r1, [pc, #60]	@ (80011b8 <HAL_PWREx_ConfigSupply+0x70>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4313      	orrs	r3, r2
 8001180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001182:	f7ff fc65 	bl	8000a50 <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001188:	e009      	b.n	800119e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800118a:	f7ff fc61 	bl	8000a50 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001198:	d901      	bls.n	800119e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e007      	b.n	80011ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_PWREx_ConfigSupply+0x70>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011aa:	d1ee      	bne.n	800118a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	58024800 	.word	0x58024800

080011bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 bc48 	b.w	8001a60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8088 	beq.w	80012ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011de:	4b99      	ldr	r3, [pc, #612]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011e8:	4b96      	ldr	r3, [pc, #600]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d007      	beq.n	8001204 <HAL_RCC_OscConfig+0x48>
 80011f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d111      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
 80011fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	4b8f      	ldr	r3, [pc, #572]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d06d      	beq.n	80012ec <HAL_RCC_OscConfig+0x130>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d169      	bne.n	80012ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 bc21 	b.w	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x7a>
 8001228:	4b86      	ldr	r3, [pc, #536]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a85      	ldr	r2, [pc, #532]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800122e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e02e      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x9c>
 800123e:	4b81      	ldr	r3, [pc, #516]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a80      	ldr	r2, [pc, #512]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b7e      	ldr	r3, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7d      	ldr	r2, [pc, #500]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0xc0>
 8001262:	4b78      	ldr	r3, [pc, #480]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a77      	ldr	r2, [pc, #476]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a74      	ldr	r2, [pc, #464]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xd8>
 800127c:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a70      	ldr	r2, [pc, #448]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b6e      	ldr	r3, [pc, #440]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6d      	ldr	r2, [pc, #436]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fbd8 	bl	8000a50 <HAL_GetTick>
 80012a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fbd4 	bl	8000a50 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e3d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b6:	4b63      	ldr	r3, [pc, #396]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe8>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbc4 	bl	8000a50 <HAL_GetTick>
 80012c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fbc0 	bl	8000a50 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e3c0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x110>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80ca 	beq.w	8001490 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fc:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001304:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001306:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_RCC_OscConfig+0x166>
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2b18      	cmp	r3, #24
 8001316:	d156      	bne.n	80013c6 <HAL_RCC_OscConfig+0x20a>
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d151      	bne.n	80013c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001322:	4b48      	ldr	r3, [pc, #288]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x17e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e392      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800133a:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0219 	bic.w	r2, r3, #25
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	493f      	ldr	r1, [pc, #252]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fb80 	bl	8000a50 <HAL_GetTick>
 8001350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fb7c 	bl	8000a50 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e37c      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	f7ff fb9d 	bl	8000ab0 <HAL_GetREVID>
 8001376:	4603      	mov	r3, r0
 8001378:	f241 0203 	movw	r2, #4099	@ 0x1003
 800137c:	4293      	cmp	r3, r2
 800137e:	d817      	bhi.n	80013b0 <HAL_RCC_OscConfig+0x1f4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b40      	cmp	r3, #64	@ 0x40
 8001386:	d108      	bne.n	800139a <HAL_RCC_OscConfig+0x1de>
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001390:	4a2c      	ldr	r2, [pc, #176]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001396:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	e07a      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	031b      	lsls	r3, r3, #12
 80013a8:	4926      	ldr	r1, [pc, #152]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ae:	e06f      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	4921      	ldr	r1, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	e064      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d047      	beq.n	800145e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 0219 	bic.w	r2, r3, #25
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	491a      	ldr	r1, [pc, #104]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb36 	bl	8000a50 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fb32 	bl	8000a50 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e332      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	f7ff fb53 	bl	8000ab0 <HAL_GetREVID>
 800140a:	4603      	mov	r3, r0
 800140c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001410:	4293      	cmp	r3, r2
 8001412:	d819      	bhi.n	8001448 <HAL_RCC_OscConfig+0x28c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b40      	cmp	r3, #64	@ 0x40
 800141a:	d108      	bne.n	800142e <HAL_RCC_OscConfig+0x272>
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142a:	6053      	str	r3, [r2, #4]
 800142c:	e030      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	4901      	ldr	r1, [pc, #4]	@ (8001444 <HAL_RCC_OscConfig+0x288>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
 8001442:	e025      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
 8001444:	58024400 	.word	0x58024400
 8001448:	4b9a      	ldr	r3, [pc, #616]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	061b      	lsls	r3, r3, #24
 8001456:	4997      	ldr	r1, [pc, #604]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e018      	b.n	8001490 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b95      	ldr	r3, [pc, #596]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a94      	ldr	r2, [pc, #592]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff faf1 	bl	8000a50 <HAL_GetTick>
 800146e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff faed 	bl	8000a50 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e2ed      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001484:	4b8b      	ldr	r3, [pc, #556]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a9 	beq.w	80015f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014a8:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d007      	beq.n	80014c4 <HAL_RCC_OscConfig+0x308>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	d13a      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d135      	bne.n	8001530 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c4:	4b7b      	ldr	r3, [pc, #492]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x320>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b80      	cmp	r3, #128	@ 0x80
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2c1      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014dc:	f7ff fae8 	bl	8000ab0 <HAL_GetREVID>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d817      	bhi.n	800151a <HAL_RCC_OscConfig+0x35e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_OscConfig+0x348>
 80014f2:	4b70      	ldr	r3, [pc, #448]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014fa:	4a6e      	ldr	r2, [pc, #440]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001500:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001502:	e075      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001504:	4b6b      	ldr	r3, [pc, #428]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	069b      	lsls	r3, r3, #26
 8001512:	4968      	ldr	r1, [pc, #416]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001518:	e06a      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151a:	4b66      	ldr	r3, [pc, #408]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	4962      	ldr	r1, [pc, #392]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800152e:	e05f      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d042      	beq.n	80015be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001538:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5d      	ldr	r2, [pc, #372]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fa84 	bl	8000a50 <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800154c:	f7ff fa80 	bl	8000a50 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e280      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800156a:	f7ff faa1 	bl	8000ab0 <HAL_GetREVID>
 800156e:	4603      	mov	r3, r0
 8001570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001574:	4293      	cmp	r3, r2
 8001576:	d817      	bhi.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	2b20      	cmp	r3, #32
 800157e:	d108      	bne.n	8001592 <HAL_RCC_OscConfig+0x3d6>
 8001580:	4b4c      	ldr	r3, [pc, #304]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001588:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800158e:	6053      	str	r3, [r2, #4]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
 8001592:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	069b      	lsls	r3, r3, #26
 80015a0:	4944      	ldr	r1, [pc, #272]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e023      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
 80015a8:	4b42      	ldr	r3, [pc, #264]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	493f      	ldr	r1, [pc, #252]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015be:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa41 	bl	8000a50 <HAL_GetTick>
 80015ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015d2:	f7ff fa3d 	bl	8000a50 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e23d      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d036      	beq.n	800166a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d019      	beq.n	8001638 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001608:	4a2a      	ldr	r2, [pc, #168]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fa1e 	bl	8000a50 <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fa1a 	bl	8000a50 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e21a      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x45c>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fa04 	bl	8000a50 <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fa00 	bl	8000a50 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e200      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d039      	beq.n	80016ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0c      	ldr	r2, [pc, #48]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800168a:	f7ff f9e1 	bl	8000a50 <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001692:	f7ff f9dd 	bl	8000a50 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x4d6>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x52e>
 80016b2:	bf00      	nop
 80016b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9a      	ldr	r2, [pc, #616]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f9c4 	bl	8000a50 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016cc:	f7ff f9c0 	bl	8000a50 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1c0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016de:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8081 	beq.w	80017fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016f8:	4b8c      	ldr	r3, [pc, #560]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a8b      	ldr	r2, [pc, #556]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001704:	f7ff f9a4 	bl	8000a50 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170c:	f7ff f9a0 	bl	8000a50 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1a0      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800171e:	4b83      	ldr	r3, [pc, #524]	@ (800192c <HAL_RCC_OscConfig+0x770>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x584>
 8001732:	4b7d      	ldr	r3, [pc, #500]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	4a7c      	ldr	r2, [pc, #496]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70
 800173e:	e02d      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x5a6>
 8001748:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a76      	ldr	r2, [pc, #472]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	4b74      	ldr	r3, [pc, #464]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a73      	ldr	r2, [pc, #460]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c8>
 800176a:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a6e      	ldr	r2, [pc, #440]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	4a6b      	ldr	r2, [pc, #428]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0x5e0>
 8001784:	4b68      	ldr	r3, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a67      	ldr	r2, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001794:	4a64      	ldr	r2, [pc, #400]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 0304 	bic.w	r3, r3, #4
 800179a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff f954 	bl	8000a50 <HAL_GetTick>
 80017a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff f950 	bl	8000a50 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e14e      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017c2:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x5f0>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff f93e 	bl	8000a50 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff f93a 	bl	8000a50 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e138      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ee      	bne.n	80017d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 812d 	beq.w	8001a5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001804:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800180c:	2b18      	cmp	r3, #24
 800180e:	f000 80bd 	beq.w	800198c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001816:	2b02      	cmp	r3, #2
 8001818:	f040 809e 	bne.w	8001958 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a41      	ldr	r2, [pc, #260]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff f912 	bl	8000a50 <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f90e 	bl	8000a50 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e10e      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_RCC_OscConfig+0x774>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	430a      	orrs	r2, r1
 8001862:	4931      	ldr	r1, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	628b      	str	r3, [r1, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	3b01      	subs	r3, #1
 800186e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001876:	3b01      	subs	r3, #1
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	b29b      	uxth	r3, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001882:	3b01      	subs	r3, #1
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001890:	3b01      	subs	r3, #1
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001898:	4923      	ldr	r1, [pc, #140]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018b6:	00d2      	lsls	r2, r2, #3
 80018b8:	491b      	ldr	r1, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	f023 020c 	bic.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4917      	ldr	r1, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	f023 0202 	bic.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	4912      	ldr	r1, [pc, #72]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_RCC_OscConfig+0x76c>)
 8001918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f897 	bl	8000a50 <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001924:	e011      	b.n	800194a <HAL_RCC_OscConfig+0x78e>
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	58024800 	.word	0x58024800
 8001930:	fffffc0c 	.word	0xfffffc0c
 8001934:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f88a 	bl	8000a50 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e08a      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x77c>
 8001956:	e082      	b.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800195e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff f874 	bl	8000a50 <HAL_GetTick>
 8001968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f870 	bl	8000a50 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e070      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x7b0>
 800198a:	e068      	b.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	2b01      	cmp	r3, #1
 800199e:	d031      	beq.n	8001a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0203 	and.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d12a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d122      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0a5b      	lsrs	r3, r3, #9
 80019d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d111      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0e1b      	lsrs	r3, r3, #24
 80019f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e02b      	b.n	8001a60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d01f      	beq.n	8001a5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a2a:	f7ff f811 	bl	8000a50 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a30:	bf00      	nop
 8001a32:	f7ff f80d 	bl	8000a50 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d0f9      	beq.n	8001a32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_RCC_OscConfig+0x8b0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_RCC_OscConfig+0x8ac>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3730      	adds	r7, #48	@ 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	ffff0007 	.word	0xffff0007

08001a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e19c      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b87      	ldr	r3, [pc, #540]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 020f 	bic.w	r2, r3, #15
 8001a9a:	4985      	ldr	r1, [pc, #532]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b83      	ldr	r3, [pc, #524]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e184      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ad0:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	4975      	ldr	r1, [pc, #468]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4b70      	ldr	r3, [pc, #448]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	496a      	ldr	r1, [pc, #424]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b2c:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	495e      	ldr	r1, [pc, #376]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d010      	beq.n	8001b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	4b59      	ldr	r3, [pc, #356]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d908      	bls.n	8001b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4953      	ldr	r1, [pc, #332]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d908      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f023 020f 	bic.w	r2, r3, #15
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4947      	ldr	r1, [pc, #284]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d055      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4940      	ldr	r1, [pc, #256]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d121      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0f6      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d115      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0ea      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0de      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d6      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f023 0207 	bic.w	r2, r3, #7
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4925      	ldr	r1, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c22:	f7fe ff15 	bl	8000a50 <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7fe ff11 	bl	8000a50 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0be      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1eb      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d208      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f023 020f 	bic.w	r2, r3, #15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	490e      	ldr	r1, [pc, #56]	@ (8001cb4 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d214      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 020f 	bic.w	r2, r3, #15
 8001c96:	4906      	ldr	r1, [pc, #24]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_RCC_ClockConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e086      	b.n	8001dbe <HAL_RCC_ClockConfig+0x34e>
 8001cb0:	52002000 	.word	0x52002000
 8001cb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4939      	ldr	r1, [pc, #228]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d208      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	492e      	ldr	r1, [pc, #184]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d208      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d208      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4917      	ldr	r1, [pc, #92]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d70:	f000 f834 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	4912      	ldr	r1, [pc, #72]	@ (8001dcc <HAL_RCC_ClockConfig+0x35c>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x358>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <HAL_RCC_ClockConfig+0x35c>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_RCC_ClockConfig+0x360>)
 8001da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x364>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_ClockConfig+0x368>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fe02 	bl	80009bc <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	080042ac 	.word	0x080042ac
 8001dd0:	24000008 	.word	0x24000008
 8001dd4:	24000004 	.word	0x24000004
 8001dd8:	2400000c 	.word	0x2400000c

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de2:	4bb3      	ldr	r3, [pc, #716]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	f200 8155 	bhi.w	800209a <HAL_RCC_GetSysClockFreq+0x2be>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e5d 	.word	0x08001e5d
 8001dfc:	0800209b 	.word	0x0800209b
 8001e00:	0800209b 	.word	0x0800209b
 8001e04:	0800209b 	.word	0x0800209b
 8001e08:	0800209b 	.word	0x0800209b
 8001e0c:	0800209b 	.word	0x0800209b
 8001e10:	0800209b 	.word	0x0800209b
 8001e14:	0800209b 	.word	0x0800209b
 8001e18:	08001e83 	.word	0x08001e83
 8001e1c:	0800209b 	.word	0x0800209b
 8001e20:	0800209b 	.word	0x0800209b
 8001e24:	0800209b 	.word	0x0800209b
 8001e28:	0800209b 	.word	0x0800209b
 8001e2c:	0800209b 	.word	0x0800209b
 8001e30:	0800209b 	.word	0x0800209b
 8001e34:	0800209b 	.word	0x0800209b
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	0800209b 	.word	0x0800209b
 8001e40:	0800209b 	.word	0x0800209b
 8001e44:	0800209b 	.word	0x0800209b
 8001e48:	0800209b 	.word	0x0800209b
 8001e4c:	0800209b 	.word	0x0800209b
 8001e50:	0800209b 	.word	0x0800209b
 8001e54:	0800209b 	.word	0x0800209b
 8001e58:	08001e8f 	.word	0x08001e8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e5c:	4b94      	ldr	r3, [pc, #592]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e68:	4b91      	ldr	r3, [pc, #580]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	4a90      	ldr	r2, [pc, #576]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e7a:	e111      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e7e:	61bb      	str	r3, [r7, #24]
      break;
 8001e80:	e10e      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e82:	4b8d      	ldr	r3, [pc, #564]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e84:	61bb      	str	r3, [r7, #24]
      break;
 8001e86:	e10b      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e88:	4b8c      	ldr	r3, [pc, #560]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e8a:	61bb      	str	r3, [r7, #24]
      break;
 8001e8c:	e108      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e8e:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e98:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ea4:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001eae:	4b80      	ldr	r3, [pc, #512]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80e1 	beq.w	8002094 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	f000 8083 	beq.w	8001fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f200 80a1 	bhi.w	8002024 <HAL_RCC_GetSysClockFreq+0x248>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d056      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001eee:	e099      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d02d      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001efc:	4b6c      	ldr	r3, [pc, #432]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	4a6b      	ldr	r2, [pc, #428]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	ee07 3a90 	vmov	s15, r3
 8001f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f26:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f56:	e087      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f9a:	e065      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fae:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fde:	e043      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002022:	e021      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002046:	ed97 6a02 	vldr	s12, [r7, #8]
 800204a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	0a5b      	lsrs	r3, r3, #9
 800206e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002072:	3301      	adds	r3, #1
 8002074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002080:	edd7 6a07 	vldr	s13, [r7, #28]
 8002084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208c:	ee17 3a90 	vmov	r3, s15
 8002090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002092:	e005      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
      break;
 8002098:	e002      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800209c:	61bb      	str	r3, [r7, #24]
      break;
 800209e:	bf00      	nop
  }

  return sysclockfreq;
 80020a0:	69bb      	ldr	r3, [r7, #24]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	03d09000 	.word	0x03d09000
 80020b8:	003d0900 	.word	0x003d0900
 80020bc:	017d7840 	.word	0x017d7840
 80020c0:	46000000 	.word	0x46000000
 80020c4:	4c742400 	.word	0x4c742400
 80020c8:	4a742400 	.word	0x4a742400
 80020cc:	4bbebc20 	.word	0x4bbebc20

080020d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d4:	b0ca      	sub	sp, #296	@ 0x128
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80020f4:	2500      	movs	r5, #0
 80020f6:	ea54 0305 	orrs.w	r3, r4, r5
 80020fa:	d049      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80020fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002102:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002106:	d02f      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002108:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800210c:	d828      	bhi.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800210e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002112:	d01a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002118:	d822      	bhi.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800211e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002122:	d007      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002124:	e01c      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002126:	4bb8      	ldr	r3, [pc, #736]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	4ab7      	ldr	r2, [pc, #732]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800212c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002132:	e01a      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002138:	3308      	adds	r3, #8
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f001 f9d1 	bl	80034e4 <RCCEx_PLL2_Config>
 8002142:	4603      	mov	r3, r0
 8002144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002148:	e00f      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800214a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800214e:	3328      	adds	r3, #40	@ 0x28
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f001 fa78 	bl	8003648 <RCCEx_PLL3_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800215e:	e004      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002166:	e000      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800216a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002172:	4ba5      	ldr	r3, [pc, #660]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800217a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800217e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002180:	4aa1      	ldr	r2, [pc, #644]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002182:	430b      	orrs	r3, r1
 8002184:	6513      	str	r3, [r2, #80]	@ 0x50
 8002186:	e003      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800218c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800219c:	f04f 0900 	mov.w	r9, #0
 80021a0:	ea58 0309 	orrs.w	r3, r8, r9
 80021a4:	d047      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80021a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d82a      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80021b0:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021cd 	.word	0x080021cd
 80021bc:	080021db 	.word	0x080021db
 80021c0:	080021f1 	.word	0x080021f1
 80021c4:	0800220f 	.word	0x0800220f
 80021c8:	0800220f 	.word	0x0800220f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	4a8d      	ldr	r2, [pc, #564]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021d8:	e01a      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80021da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021de:	3308      	adds	r3, #8
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 f97e 	bl	80034e4 <RCCEx_PLL2_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021ee:	e00f      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021f4:	3328      	adds	r3, #40	@ 0x28
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fa25 	bl	8003648 <RCCEx_PLL3_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002204:	e004      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800220c:	e000      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800220e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002218:	4b7b      	ldr	r3, [pc, #492]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221c:	f023 0107 	bic.w	r1, r3, #7
 8002220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002226:	4a78      	ldr	r2, [pc, #480]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002228:	430b      	orrs	r3, r1
 800222a:	6513      	str	r3, [r2, #80]	@ 0x50
 800222c:	e003      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002242:	f04f 0b00 	mov.w	fp, #0
 8002246:	ea5a 030b 	orrs.w	r3, sl, fp
 800224a:	d04c      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800224c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002256:	d030      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800225c:	d829      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800225e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002260:	d02d      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002262:	2bc0      	cmp	r3, #192	@ 0xc0
 8002264:	d825      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002266:	2b80      	cmp	r3, #128	@ 0x80
 8002268:	d018      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800226a:	2b80      	cmp	r3, #128	@ 0x80
 800226c:	d821      	bhi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002272:	2b40      	cmp	r3, #64	@ 0x40
 8002274:	d007      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002276:	e01c      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002278:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227c:	4a62      	ldr	r2, [pc, #392]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800227e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002284:	e01c      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800228a:	3308      	adds	r3, #8
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f001 f928 	bl	80034e4 <RCCEx_PLL2_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800229a:	e011      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800229c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022a0:	3328      	adds	r3, #40	@ 0x28
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 f9cf 	bl	8003648 <RCCEx_PLL3_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022b0:	e006      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022b8:	e002      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022ba:	bf00      	nop
 80022bc:	e000      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80022be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80022d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d6:	4a4c      	ldr	r2, [pc, #304]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022d8:	430b      	orrs	r3, r1
 80022da:	6513      	str	r3, [r2, #80]	@ 0x50
 80022dc:	e003      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80022f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80022fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002300:	460b      	mov	r3, r1
 8002302:	4313      	orrs	r3, r2
 8002304:	d053      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800230a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800230e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002312:	d035      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002314:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002318:	d82e      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800231a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800231e:	d031      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002320:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002324:	d828      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232a:	d01a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800232c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002330:	d822      	bhi.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800233a:	d007      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800233c:	e01c      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800233e:	4b32      	ldr	r3, [pc, #200]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800234a:	e01c      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800234c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002350:	3308      	adds	r3, #8
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f001 f8c5 	bl	80034e4 <RCCEx_PLL2_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002360:	e011      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002366:	3328      	adds	r3, #40	@ 0x28
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f96c 	bl	8003648 <RCCEx_PLL3_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002376:	e006      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800237e:	e002      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10b      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800238e:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800239a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a4:	e003      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80023ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80023c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80023c8:	460b      	mov	r3, r1
 80023ca:	4313      	orrs	r3, r2
 80023cc:	d056      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80023ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023da:	d038      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80023dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e0:	d831      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023e6:	d034      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80023e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023ec:	d82b      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f2:	d01d      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80023f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f8:	d825      	bhi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80023fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002404:	e01f      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002406:	bf00      	nop
 8002408:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800240c:	4ba2      	ldr	r3, [pc, #648]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	4aa1      	ldr	r2, [pc, #644]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002418:	e01c      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800241a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800241e:	3308      	adds	r3, #8
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f85e 	bl	80034e4 <RCCEx_PLL2_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002434:	3328      	adds	r3, #40	@ 0x28
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f001 f905 	bl	8003648 <RCCEx_PLL3_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002444:	e006      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800244c:	e002      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800245c:	4b8e      	ldr	r3, [pc, #568]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002468:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800246c:	4a8a      	ldr	r2, [pc, #552]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800246e:	430b      	orrs	r3, r1
 8002470:	6593      	str	r3, [r2, #88]	@ 0x58
 8002472:	e003      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800247c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002492:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002496:	460b      	mov	r3, r1
 8002498:	4313      	orrs	r3, r2
 800249a:	d03a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800249c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	2b30      	cmp	r3, #48	@ 0x30
 80024a4:	d01f      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80024a6:	2b30      	cmp	r3, #48	@ 0x30
 80024a8:	d819      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d815      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d019      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d111      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ba:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	4a76      	ldr	r2, [pc, #472]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024c6:	e011      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024cc:	3308      	adds	r3, #8
 80024ce:	2102      	movs	r1, #2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f807 	bl	80034e4 <RCCEx_PLL2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80024dc:	e006      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024e4:	e002      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80024ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80024f4:	4b68      	ldr	r3, [pc, #416]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80024fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002504:	430b      	orrs	r3, r1
 8002506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002508:	e003      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800250e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800251e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002528:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800252c:	460b      	mov	r3, r1
 800252e:	4313      	orrs	r3, r2
 8002530:	d051      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800253c:	d035      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800253e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002542:	d82e      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002544:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002548:	d031      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800254a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800254e:	d828      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002554:	d01a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255a:	d822      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002564:	d007      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002566:	e01c      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002568:	4b4b      	ldr	r3, [pc, #300]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	4a4a      	ldr	r2, [pc, #296]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002574:	e01c      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800257a:	3308      	adds	r3, #8
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f000 ffb0 	bl	80034e4 <RCCEx_PLL2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800258a:	e011      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800258c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002590:	3328      	adds	r3, #40	@ 0x28
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f857 	bl	8003648 <RCCEx_PLL3_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025a0:	e006      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025a8:	e002      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80025b8:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80025c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	4a34      	ldr	r2, [pc, #208]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80025e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80025ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80025f0:	460b      	mov	r3, r1
 80025f2:	4313      	orrs	r3, r2
 80025f4:	d056      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002600:	d033      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002602:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002606:	d82c      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002608:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800260c:	d02f      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800260e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002612:	d826      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002618:	d02b      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800261a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800261e:	d820      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002624:	d012      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800262a:	d81a      	bhi.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d022      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002634:	d115      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800263a:	3308      	adds	r3, #8
 800263c:	2101      	movs	r1, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f000 ff50 	bl	80034e4 <RCCEx_PLL2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800264a:	e015      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800264c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002650:	3328      	adds	r3, #40	@ 0x28
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fff7 	bl	8003648 <RCCEx_PLL3_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002660:	e00a      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002668:	e006      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800266a:	bf00      	nop
 800266c:	e004      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800266e:	bf00      	nop
 8002670:	e002      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800268e:	4a02      	ldr	r2, [pc, #8]	@ (8002698 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002690:	430b      	orrs	r3, r1
 8002692:	6513      	str	r3, [r2, #80]	@ 0x50
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80026be:	460b      	mov	r3, r1
 80026c0:	4313      	orrs	r3, r2
 80026c2:	d055      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d0:	d033      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80026d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d6:	d82c      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026dc:	d02f      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e2:	d826      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80026e8:	d02b      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80026ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80026ee:	d820      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026f4:	d012      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80026f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026fa:	d81a      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d022      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002704:	d115      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	3308      	adds	r3, #8
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fee8 	bl	80034e4 <RCCEx_PLL2_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800271a:	e015      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	3328      	adds	r3, #40	@ 0x28
 8002722:	2101      	movs	r1, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f000 ff8f 	bl	8003648 <RCCEx_PLL3_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002730:	e00a      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800273a:	bf00      	nop
 800273c:	e004      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002750:	4ba3      	ldr	r3, [pc, #652]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002760:	4a9f      	ldr	r2, [pc, #636]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002762:	430b      	orrs	r3, r1
 8002764:	6593      	str	r3, [r2, #88]	@ 0x58
 8002766:	e003      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800276c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800277c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800278a:	460b      	mov	r3, r1
 800278c:	4313      	orrs	r3, r2
 800278e:	d037      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800279a:	d00e      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a0:	d816      	bhi.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80027a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027aa:	d111      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ac:	4b8c      	ldr	r3, [pc, #560]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	4a8b      	ldr	r2, [pc, #556]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027b8:	e00f      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027be:	3308      	adds	r3, #8
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fe8e 	bl	80034e4 <RCCEx_PLL2_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027ce:	e004      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027d6:	e000      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80027d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e2:	4b7f      	ldr	r3, [pc, #508]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80027ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4a7b      	ldr	r2, [pc, #492]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80027f6:	e003      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800280c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800281a:	460b      	mov	r3, r1
 800281c:	4313      	orrs	r3, r2
 800281e:	d039      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002826:	2b03      	cmp	r3, #3
 8002828:	d81c      	bhi.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800282a:	a201      	add	r2, pc, #4	@ (adr r2, 8002830 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	0800286d 	.word	0x0800286d
 8002834:	08002841 	.word	0x08002841
 8002838:	0800284f 	.word	0x0800284f
 800283c:	0800286d 	.word	0x0800286d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b67      	ldr	r3, [pc, #412]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a66      	ldr	r2, [pc, #408]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800284c:	e00f      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	3308      	adds	r3, #8
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fe44 	bl	80034e4 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002862:	e004      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800286a:	e000      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800286c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800286e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002876:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f023 0103 	bic.w	r1, r3, #3
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002884:	4a56      	ldr	r2, [pc, #344]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002886:	430b      	orrs	r3, r1
 8002888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288a:	e003      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80028a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80028ae:	460b      	mov	r3, r1
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f000 809f 	beq.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b6:	4b4b      	ldr	r3, [pc, #300]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a4a      	ldr	r2, [pc, #296]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c2:	f7fe f8c5 	bl	8000a50 <HAL_GetTick>
 80028c6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe f8c0 	bl	8000a50 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	@ 0x64
 80028da:	d903      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ed      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80028f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d179      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028f8:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002904:	4053      	eors	r3, r2
 8002906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800290e:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002916:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800291a:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	4a30      	ldr	r2, [pc, #192]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002924:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002926:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a2d      	ldr	r2, [pc, #180]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002932:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002934:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800293a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002946:	d118      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe f882 	bl	8000a50 <HAL_GetTick>
 800294c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002950:	e00d      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe f87d 	bl	8000a50 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002962:	429a      	cmp	r2, r3
 8002964:	d903      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800296c:	e005      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296e:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0eb      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800297a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800297e:	2b00      	cmp	r3, #0
 8002980:	d129      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002986:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800298a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002992:	d10e      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800299c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029a4:	091a      	lsrs	r2, r3, #4
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	4a0d      	ldr	r2, [pc, #52]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6113      	str	r3, [r2, #16]
 80029b0:	e005      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029bc:	6113      	str	r3, [r2, #16]
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80029c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d4:	e00e      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80029de:	e009      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80029e0:	58024400 	.word	0x58024400
 80029e4:	58024800 	.word	0x58024800
 80029e8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f002 0301 	and.w	r3, r2, #1
 8002a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f000 8089 	beq.w	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a1c:	2b28      	cmp	r3, #40	@ 0x28
 8002a1e:	d86b      	bhi.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002b01 	.word	0x08002b01
 8002a2c:	08002af9 	.word	0x08002af9
 8002a30:	08002af9 	.word	0x08002af9
 8002a34:	08002af9 	.word	0x08002af9
 8002a38:	08002af9 	.word	0x08002af9
 8002a3c:	08002af9 	.word	0x08002af9
 8002a40:	08002af9 	.word	0x08002af9
 8002a44:	08002af9 	.word	0x08002af9
 8002a48:	08002acd 	.word	0x08002acd
 8002a4c:	08002af9 	.word	0x08002af9
 8002a50:	08002af9 	.word	0x08002af9
 8002a54:	08002af9 	.word	0x08002af9
 8002a58:	08002af9 	.word	0x08002af9
 8002a5c:	08002af9 	.word	0x08002af9
 8002a60:	08002af9 	.word	0x08002af9
 8002a64:	08002af9 	.word	0x08002af9
 8002a68:	08002ae3 	.word	0x08002ae3
 8002a6c:	08002af9 	.word	0x08002af9
 8002a70:	08002af9 	.word	0x08002af9
 8002a74:	08002af9 	.word	0x08002af9
 8002a78:	08002af9 	.word	0x08002af9
 8002a7c:	08002af9 	.word	0x08002af9
 8002a80:	08002af9 	.word	0x08002af9
 8002a84:	08002af9 	.word	0x08002af9
 8002a88:	08002b01 	.word	0x08002b01
 8002a8c:	08002af9 	.word	0x08002af9
 8002a90:	08002af9 	.word	0x08002af9
 8002a94:	08002af9 	.word	0x08002af9
 8002a98:	08002af9 	.word	0x08002af9
 8002a9c:	08002af9 	.word	0x08002af9
 8002aa0:	08002af9 	.word	0x08002af9
 8002aa4:	08002af9 	.word	0x08002af9
 8002aa8:	08002b01 	.word	0x08002b01
 8002aac:	08002af9 	.word	0x08002af9
 8002ab0:	08002af9 	.word	0x08002af9
 8002ab4:	08002af9 	.word	0x08002af9
 8002ab8:	08002af9 	.word	0x08002af9
 8002abc:	08002af9 	.word	0x08002af9
 8002ac0:	08002af9 	.word	0x08002af9
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002b01 	.word	0x08002b01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fd05 	bl	80034e4 <RCCEx_PLL2_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ae0:	e00f      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae6:	3328      	adds	r3, #40	@ 0x28
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fdac 	bl	8003648 <RCCEx_PLL3_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002af6:	e004      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002afe:	e000      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b0a:	4bbf      	ldr	r3, [pc, #764]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b18:	4abb      	ldr	r2, [pc, #748]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b1e:	e003      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f002 0302 	and.w	r3, r2, #2
 8002b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002b42:	460b      	mov	r3, r1
 8002b44:	4313      	orrs	r3, r2
 8002b46:	d041      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d824      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002b52:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002ba5 	.word	0x08002ba5
 8002b5c:	08002b71 	.word	0x08002b71
 8002b60:	08002b87 	.word	0x08002b87
 8002b64:	08002ba5 	.word	0x08002ba5
 8002b68:	08002ba5 	.word	0x08002ba5
 8002b6c:	08002ba5 	.word	0x08002ba5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b74:	3308      	adds	r3, #8
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fcb3 	bl	80034e4 <RCCEx_PLL2_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b84:	e00f      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8a:	3328      	adds	r3, #40	@ 0x28
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd5a 	bl	8003648 <RCCEx_PLL3_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002b9a:	e004      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bae:	4b96      	ldr	r3, [pc, #600]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb2:	f023 0107 	bic.w	r1, r3, #7
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bbc:	4a92      	ldr	r2, [pc, #584]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f002 0304 	and.w	r3, r2, #4
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4313      	orrs	r3, r2
 8002bea:	d044      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d825      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c4d 	.word	0x08002c4d
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002c2f 	.word	0x08002c2f
 8002c0c:	08002c4d 	.word	0x08002c4d
 8002c10:	08002c4d 	.word	0x08002c4d
 8002c14:	08002c4d 	.word	0x08002c4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fc5f 	bl	80034e4 <RCCEx_PLL2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c2c:	e00f      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	3328      	adds	r3, #40	@ 0x28
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fd06 	bl	8003648 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c56:	4b6c      	ldr	r3, [pc, #432]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	f023 0107 	bic.w	r1, r3, #7
 8002c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	4a68      	ldr	r2, [pc, #416]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6c:	e003      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f002 0320 	and.w	r3, r2, #32
 8002c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c90:	460b      	mov	r3, r1
 8002c92:	4313      	orrs	r3, r2
 8002c94:	d055      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca2:	d033      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca8:	d82c      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d02f      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb4:	d826      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cba:	d02b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cc0:	d820      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc6:	d012      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ccc:	d81a      	bhi.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d022      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd6:	d115      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	3308      	adds	r3, #8
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fbff 	bl	80034e4 <RCCEx_PLL2_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002cec:	e015      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf2:	3328      	adds	r3, #40	@ 0x28
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fca6 	bl	8003648 <RCCEx_PLL3_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d02:	e00a      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d0a:	e006      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d0c:	bf00      	nop
 8002d0e:	e004      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d22:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	4a35      	ldr	r2, [pc, #212]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d38:	e003      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	d058      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d6e:	d033      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002d70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d74:	d82c      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d7a:	d02f      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d80:	d826      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d86:	d02b      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002d88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d8c:	d820      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d92:	d012      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d98:	d81a      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d022      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d115      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da8:	3308      	adds	r3, #8
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fb99 	bl	80034e4 <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002db8:	e015      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	3328      	adds	r3, #40	@ 0x28
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fc40 	bl	8003648 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002dce:	e00a      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dd6:	e006      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002dd8:	bf00      	nop
 8002dda:	e004      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e002      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dfe:	4a02      	ldr	r2, [pc, #8]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	e006      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002e06:	bf00      	nop
 8002e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	d055      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e3c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e40:	d033      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002e42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e46:	d82c      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4c:	d02f      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e52:	d826      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e54:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e58:	d02b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002e5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e5e:	d820      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e64:	d012      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e6a:	d81a      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fb30 	bl	80034e4 <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	3328      	adds	r3, #40	@ 0x28
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fbd7 	bl	8003648 <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002ed0:	4a9d      	ldr	r2, [pc, #628]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f002 0308 	and.w	r3, r2, #8
 8002eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ef6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d01e      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	3328      	adds	r3, #40	@ 0x28
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fb96 	bl	8003648 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f28:	4b87      	ldr	r3, [pc, #540]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f38:	4a83      	ldr	r2, [pc, #524]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f002 0310 	and.w	r3, r2, #16
 8002f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	d01e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f70:	3328      	adds	r3, #40	@ 0x28
 8002f72:	2102      	movs	r1, #2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fb67 	bl	8003648 <RCCEx_PLL3_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f86:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f96:	4a6c      	ldr	r2, [pc, #432]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002fa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fb2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	d03e      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fc8:	d022      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fce:	d81b      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002fda:	e015      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa7d 	bl	80034e4 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002ff0:	e00f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	3328      	adds	r3, #40	@ 0x28
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fb24 	bl	8003648 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003006:	e004      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301a:	4b4b      	ldr	r3, [pc, #300]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800302a:	4a47      	ldr	r2, [pc, #284]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003046:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003048:	2300      	movs	r3, #0
 800304a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800304c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d03b      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003062:	d01f      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003064:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003068:	d818      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306e:	d003      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003074:	d007      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003076:	e011      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800307e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	3328      	adds	r3, #40	@ 0x28
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fada 	bl	8003648 <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800309a:	e004      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80030da:	673b      	str	r3, [r7, #112]	@ 0x70
 80030dc:	2300      	movs	r3, #0
 80030de:	677b      	str	r3, [r7, #116]	@ 0x74
 80030e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80030e4:	460b      	mov	r3, r1
 80030e6:	4313      	orrs	r3, r2
 80030e8:	d034      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f8:	d007      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80030fa:	e011      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	4a11      	ldr	r2, [pc, #68]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003108:	e00e      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	3308      	adds	r3, #8
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f9e6 	bl	80034e4 <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10d      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003134:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313e:	4a02      	ldr	r2, [pc, #8]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003140:	430b      	orrs	r3, r1
 8003142:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003144:	e006      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003160:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003162:	2300      	movs	r3, #0
 8003164:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003166:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800316a:	460b      	mov	r3, r1
 800316c:	4313      	orrs	r3, r2
 800316e:	d00c      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003174:	3328      	adds	r3, #40	@ 0x28
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fa65 	bl	8003648 <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800318a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003196:	663b      	str	r3, [r7, #96]	@ 0x60
 8003198:	2300      	movs	r3, #0
 800319a:	667b      	str	r3, [r7, #100]	@ 0x64
 800319c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80031a0:	460b      	mov	r3, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	d038      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b2:	d018      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80031b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b8:	d811      	bhi.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031be:	d014      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c4:	d80b      	bhi.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ce:	d106      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d0:	4bc3      	ldr	r3, [pc, #780]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	4ac2      	ldr	r2, [pc, #776]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031e4:	e004      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80031ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031f8:	4bb9      	ldr	r3, [pc, #740]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003208:	4ab5      	ldr	r2, [pc, #724]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800320a:	430b      	orrs	r3, r1
 800320c:	6553      	str	r3, [r2, #84]	@ 0x54
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003224:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003226:	2300      	movs	r3, #0
 8003228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800322a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003234:	4baa      	ldr	r3, [pc, #680]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003242:	4aa7      	ldr	r2, [pc, #668]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003244:	430b      	orrs	r3, r1
 8003246:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003254:	653b      	str	r3, [r7, #80]	@ 0x50
 8003256:	2300      	movs	r3, #0
 8003258:	657b      	str	r3, [r7, #84]	@ 0x54
 800325a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800325e:	460b      	mov	r3, r1
 8003260:	4313      	orrs	r3, r2
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003264:	4b9e      	ldr	r3, [pc, #632]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003274:	4a9a      	ldr	r2, [pc, #616]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003276:	430b      	orrs	r3, r1
 8003278:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003288:	2300      	movs	r3, #0
 800328a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800328c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003296:	4b92      	ldr	r3, [pc, #584]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a4:	4a8e      	ldr	r2, [pc, #568]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80032b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032b8:	2300      	movs	r3, #0
 80032ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80032bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032c6:	4b86      	ldr	r3, [pc, #536]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4a85      	ldr	r2, [pc, #532]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032d0:	6113      	str	r3, [r2, #16]
 80032d2:	4b83      	ldr	r3, [pc, #524]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80032de:	4a80      	ldr	r2, [pc, #512]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80032f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032f2:	2300      	movs	r3, #0
 80032f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003300:	4b77      	ldr	r3, [pc, #476]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	4a74      	ldr	r2, [pc, #464]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003310:	430b      	orrs	r3, r1
 8003312:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	@ 0x34
 8003326:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800332a:	460b      	mov	r3, r1
 800332c:	4313      	orrs	r3, r2
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003330:	4b6b      	ldr	r3, [pc, #428]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003340:	4a67      	ldr	r2, [pc, #412]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003342:	430b      	orrs	r3, r1
 8003344:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	2100      	movs	r1, #0
 8003350:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003358:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d011      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003366:	3308      	adds	r3, #8
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f8ba 	bl	80034e4 <RCCEx_PLL2_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	2100      	movs	r1, #0
 8003390:	6239      	str	r1, [r7, #32]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
 8003398:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d011      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	3308      	adds	r3, #8
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f89a 	bl	80034e4 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	2100      	movs	r1, #0
 80033d0:	61b9      	str	r1, [r7, #24]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d011      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	3308      	adds	r3, #8
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f87a 	bl	80034e4 <RCCEx_PLL2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80033f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	2100      	movs	r1, #0
 8003410:	6139      	str	r1, [r7, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800341c:	460b      	mov	r3, r1
 800341e:	4313      	orrs	r3, r2
 8003420:	d011      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	3328      	adds	r3, #40	@ 0x28
 8003428:	2100      	movs	r1, #0
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f90c 	bl	8003648 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	2100      	movs	r1, #0
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d011      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	3328      	adds	r3, #40	@ 0x28
 8003468:	2101      	movs	r1, #1
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8ec 	bl	8003648 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	2100      	movs	r1, #0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e9d7 1200 	ldrd	r1, r2, [r7]
 800349c:	460b      	mov	r3, r1
 800349e:	4313      	orrs	r3, r2
 80034a0:	d011      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	3328      	adds	r3, #40	@ 0x28
 80034a8:	2102      	movs	r1, #2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f8cc 	bl	8003648 <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80034b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80034c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e0:	58024400 	.word	0x58024400

080034e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034f2:	4b53      	ldr	r3, [pc, #332]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d101      	bne.n	8003502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e099      	b.n	8003636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003502:	4b4f      	ldr	r3, [pc, #316]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4e      	ldr	r2, [pc, #312]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003508:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800350c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350e:	f7fd fa9f 	bl	8000a50 <HAL_GetTick>
 8003512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003514:	e008      	b.n	8003528 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003516:	f7fd fa9b 	bl	8000a50 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e086      	b.n	8003636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003528:	4b45      	ldr	r3, [pc, #276]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003534:	4b42      	ldr	r3, [pc, #264]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	493f      	ldr	r1, [pc, #252]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	628b      	str	r3, [r1, #40]	@ 0x28
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	3b01      	subs	r3, #1
 800354e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	3b01      	subs	r3, #1
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	b29b      	uxth	r3, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	3b01      	subs	r3, #1
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003578:	4931      	ldr	r1, [pc, #196]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800357e:	4b30      	ldr	r3, [pc, #192]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	492d      	ldr	r1, [pc, #180]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 800358c:	4313      	orrs	r3, r2
 800358e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	f023 0220 	bic.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4928      	ldr	r1, [pc, #160]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035ae:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035b2:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <RCCEx_PLL2_Config+0x160>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	69d2      	ldr	r2, [r2, #28]
 80035ba:	00d2      	lsls	r2, r2, #3
 80035bc:	4920      	ldr	r1, [pc, #128]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035e0:	e00f      	b.n	8003602 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035e8:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	4a14      	ldr	r2, [pc, #80]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035f4:	e005      	b.n	8003602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	4a11      	ldr	r2, [pc, #68]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 80035fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003600:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003602:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a0e      	ldr	r2, [pc, #56]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 8003608:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800360c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360e:	f7fd fa1f 	bl	8000a50 <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003614:	e008      	b.n	8003628 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003616:	f7fd fa1b 	bl	8000a50 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e006      	b.n	8003636 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <RCCEx_PLL2_Config+0x15c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	58024400 	.word	0x58024400
 8003644:	ffff0007 	.word	0xffff0007

08003648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003656:	4b53      	ldr	r3, [pc, #332]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b03      	cmp	r3, #3
 8003660:	d101      	bne.n	8003666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e099      	b.n	800379a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003666:	4b4f      	ldr	r3, [pc, #316]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4e      	ldr	r2, [pc, #312]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fd f9ed 	bl	8000a50 <HAL_GetTick>
 8003676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003678:	e008      	b.n	800368c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800367a:	f7fd f9e9 	bl	8000a50 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e086      	b.n	800379a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800368c:	4b45      	ldr	r3, [pc, #276]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003698:	4b42      	ldr	r3, [pc, #264]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	051b      	lsls	r3, r3, #20
 80036a6:	493f      	ldr	r1, [pc, #252]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	b29b      	uxth	r3, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036dc:	4931      	ldr	r1, [pc, #196]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036e2:	4b30      	ldr	r3, [pc, #192]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	492d      	ldr	r1, [pc, #180]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036f4:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	4928      	ldr	r1, [pc, #160]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003706:	4b27      	ldr	r3, [pc, #156]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800370c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003710:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003712:	4b24      	ldr	r3, [pc, #144]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <RCCEx_PLL3_Config+0x160>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	69d2      	ldr	r2, [r2, #28]
 800371e:	00d2      	lsls	r2, r2, #3
 8003720:	4920      	ldr	r1, [pc, #128]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003726:	4b1f      	ldr	r3, [pc, #124]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003730:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800373e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003744:	e00f      	b.n	8003766 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003752:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003756:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003758:	e005      	b.n	8003766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800375a:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003764:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003766:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0e      	ldr	r2, [pc, #56]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003772:	f7fd f96d 	bl	8000a50 <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003778:	e008      	b.n	800378c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800377a:	f7fd f969 	bl	8000a50 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e006      	b.n	800379a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <RCCEx_PLL3_Config+0x15c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	58024400 	.word	0x58024400
 80037a8:	ffff0007 	.word	0xffff0007

080037ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e10f      	b.n	80039de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a87      	ldr	r2, [pc, #540]	@ (80039e8 <HAL_SPI_Init+0x23c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00f      	beq.n	80037ee <HAL_SPI_Init+0x42>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a86      	ldr	r2, [pc, #536]	@ (80039ec <HAL_SPI_Init+0x240>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00a      	beq.n	80037ee <HAL_SPI_Init+0x42>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a84      	ldr	r2, [pc, #528]	@ (80039f0 <HAL_SPI_Init+0x244>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d005      	beq.n	80037ee <HAL_SPI_Init+0x42>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d901      	bls.n	80037ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0f7      	b.n	80039de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fd08 	bl	8004204 <SPI_GetPacketSize>
 80037f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7b      	ldr	r2, [pc, #492]	@ (80039e8 <HAL_SPI_Init+0x23c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00c      	beq.n	800381a <HAL_SPI_Init+0x6e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a79      	ldr	r2, [pc, #484]	@ (80039ec <HAL_SPI_Init+0x240>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <HAL_SPI_Init+0x6e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a78      	ldr	r2, [pc, #480]	@ (80039f0 <HAL_SPI_Init+0x244>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d002      	beq.n	800381a <HAL_SPI_Init+0x6e>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d811      	bhi.n	800383e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800381e:	4a72      	ldr	r2, [pc, #456]	@ (80039e8 <HAL_SPI_Init+0x23c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a70      	ldr	r2, [pc, #448]	@ (80039ec <HAL_SPI_Init+0x240>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_SPI_Init+0x8c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <HAL_SPI_Init+0x244>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d104      	bne.n	8003842 <HAL_SPI_Init+0x96>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b10      	cmp	r3, #16
 800383c:	d901      	bls.n	8003842 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0cd      	b.n	80039de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fc fef8 	bl	800064c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800387e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003888:	d119      	bne.n	80038be <HAL_SPI_Init+0x112>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003892:	d103      	bne.n	800389c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10c      	bne.n	80038be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ac:	d107      	bne.n	80038be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00f      	beq.n	80038ea <HAL_SPI_Init+0x13e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d90b      	bls.n	80038ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e007      	b.n	80038fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	431a      	orrs	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	ea42 0103 	orr.w	r1, r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	ea42 0103 	orr.w	r1, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d113      	bne.n	800399a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003984:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003998:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40013000 	.word	0x40013000
 80039ec:	40003800 	.word	0x40003800
 80039f0:	40003c00 	.word	0x40003c00

080039f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3320      	adds	r3, #32
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3330      	adds	r3, #48	@ 0x30
 8003a10:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1e:	f7fd f817 	bl	8000a50 <HAL_GetTick>
 8003a22:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e310      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x5a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x5a>
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e305      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x6c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e2fe      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	887a      	ldrh	r2, [r7, #2]
 8003a82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	887a      	ldrh	r2, [r7, #2]
 8003a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a70      	ldr	r2, [pc, #448]	@ (8003c88 <HAL_SPI_TransmitReceive+0x294>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_SPI_TransmitReceive+0xea>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	@ (8003c8c <HAL_SPI_TransmitReceive+0x298>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_SPI_TransmitReceive+0xea>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6d      	ldr	r2, [pc, #436]	@ (8003c90 <HAL_SPI_TransmitReceive+0x29c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d102      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8003ade:	2310      	movs	r3, #16
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae2:	e001      	b.n	8003ae8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	4b69      	ldr	r3, [pc, #420]	@ (8003c94 <HAL_SPI_TransmitReceive+0x2a0>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	8879      	ldrh	r1, [r7, #2]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b14:	d107      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f240 80a2 	bls.w	8003c74 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b36:	e094      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d120      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x194>
 8003b46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01d      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003b4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003b4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d217      	bcs.n	8003b88 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003b86:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003b90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d065      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d118      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003bd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003bd4:	e045      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003bd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d21d      	bcs.n	8003c1a <HAL_SPI_TransmitReceive+0x226>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d018      	beq.n	8003c1a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bf2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf8:	1d1a      	adds	r2, r3, #4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c16:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003c18:	e023      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1a:	f7fc ff19 	bl	8000a50 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d803      	bhi.n	8003c32 <HAL_SPI_TransmitReceive+0x23e>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_TransmitReceive+0x244>
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d114      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fa15 	bl	8004068 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1fd      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003c62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f af67 	bne.w	8003b38 <HAL_SPI_TransmitReceive+0x144>
 8003c6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f af63 	bne.w	8003b38 <HAL_SPI_TransmitReceive+0x144>
 8003c72:	e1ce      	b.n	8004012 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	f240 81c2 	bls.w	8004002 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003c84:	e0c9      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x426>
 8003c86:	bf00      	nop
 8003c88:	40013000 	.word	0x40013000
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	40003c00 	.word	0x40003c00
 8003c94:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d11f      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x2f2>
 8003ca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01c      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003cac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003cae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d216      	bcs.n	8003ce6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	881a      	ldrh	r2, [r3, #0]
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc6:	1c9a      	adds	r2, r3, #2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003ce4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003cee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8092 	beq.w	8003e1a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d118      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003d32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003d34:	e071      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003d36:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003d38:	8bfb      	ldrh	r3, [r7, #30]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d228      	bcs.n	8003d90 <HAL_SPI_TransmitReceive+0x39c>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	6a3a      	ldr	r2, [r7, #32]
 8003d4e:	8812      	ldrh	r2, [r2, #0]
 8003d50:	b292      	uxth	r2, r2
 8003d52:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d62:	6a3a      	ldr	r2, [r7, #32]
 8003d64:	8812      	ldrh	r2, [r2, #0]
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b02      	subs	r3, #2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003d8c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003d8e:	e044      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8003d90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11d      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x3de>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d018      	beq.n	8003dd2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	b292      	uxth	r2, r2
 8003daa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003dce:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003dd0:	e023      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fc fe3d 	bl	8000a50 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_TransmitReceive+0x3f6>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x3fc>
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d114      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f939 	bl	8004068 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e121      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003e1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af3b 	bne.w	8003c98 <HAL_SPI_TransmitReceive+0x2a4>
 8003e22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f47f af37 	bne.w	8003c98 <HAL_SPI_TransmitReceive+0x2a4>
 8003e2a:	e0f2      	b.n	8004012 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d121      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x48a>
 8003e3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01e      	beq.n	8003e7e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003e40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003e42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d218      	bcs.n	8003e7e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3320      	adds	r3, #32
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003e7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003e86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80ba 	beq.w	8004002 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ed0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ed2:	e096      	b.n	8004002 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003ed4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ed6:	8bfb      	ldrh	r3, [r7, #30]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d24a      	bcs.n	8003f72 <HAL_SPI_TransmitReceive+0x57e>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d045      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b04      	subs	r3, #4
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f70:	e047      	b.n	8004002 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8003f72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d820      	bhi.n	8003fba <HAL_SPI_TransmitReceive+0x5c6>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01b      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003fb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003fb8:	e023      	b.n	8004002 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fc fd49 	bl	8000a50 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_TransmitReceive+0x5de>
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x5e4>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d114      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f845 	bl	8004068 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e02d      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004002:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f af11 	bne.w	8003e2c <HAL_SPI_TransmitReceive+0x438>
 800400a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	f47f af0d 	bne.w	8003e2c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	2200      	movs	r2, #0
 800401a:	2108      	movs	r1, #8
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f8c3 	bl	80041a8 <SPI_WaitOnFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f815 	bl	8004068 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800405c:	2300      	movs	r3, #0
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3730      	adds	r7, #48	@ 0x30
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop

08004068 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0208 	orr.w	r2, r2, #8
 8004086:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0210 	orr.w	r2, r2, #16
 8004096:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b3c      	ldr	r3, [pc, #240]	@ (80041a4 <SPI_CloseTransfer+0x13c>)
 80040b4:	400b      	ands	r3, r1
 80040b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80040c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d014      	beq.n	80040fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00f      	beq.n	80040fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699a      	ldr	r2, [r3, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0220 	orr.w	r2, r2, #32
 80040fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b03      	cmp	r3, #3
 8004108:	d014      	beq.n	8004134 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004132:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00f      	beq.n	800415e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004144:	f043 0201 	orr.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00f      	beq.n	8004188 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416e:	f043 0208 	orr.w	r2, r3, #8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004186:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	fffffc90 	.word	0xfffffc90

080041a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80041b8:	e010      	b.n	80041dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ba:	f7fc fc49 	bl	8000a50 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d803      	bhi.n	80041d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d102      	bne.n	80041d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e00f      	b.n	80041fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4013      	ands	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d0df      	beq.n	80041ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3307      	adds	r3, #7
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <memset>:
 800423a:	4402      	add	r2, r0
 800423c:	4603      	mov	r3, r0
 800423e:	4293      	cmp	r3, r2
 8004240:	d100      	bne.n	8004244 <memset+0xa>
 8004242:	4770      	bx	lr
 8004244:	f803 1b01 	strb.w	r1, [r3], #1
 8004248:	e7f9      	b.n	800423e <memset+0x4>
	...

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	@ (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	@ (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	@ (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	@ (8004290 <__libc_init_array+0x44>)
 8004260:	f000 f818 	bl	8004294 <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	080042bc 	.word	0x080042bc
 8004288:	080042bc 	.word	0x080042bc
 800428c:	080042bc 	.word	0x080042bc
 8004290:	080042c0 	.word	0x080042c0

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
